#==========================================================================
# Description: Build Armbian For Amlogic s9xxx tv box
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#==========================================================================

name: Build armbian

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      set_branch:
        description: "Branch: current / edge"
        required: true
        default: "current"
      set_release:
        description: "Release: jammy / focal / bullseye"
        required: true
        default: "jammy"
      set_board:
        description: "Board: odroidn2 / lepotato"
        required: true
        default: "odroidn2"
      set_desktop:
        description: "Build Desktop: no / xfce"
        required: true
        default: "no"
      armbian_soc:
        description: "Set Amlogic SoC."
        required: true
        default: "s905d"
      armbian_kernel:
        description: "Set kernel version."
        required: true
        default: "5.10.161"
      armbian_size:
        description: "Set armbian rootfs size(Unit: MiB)."
        required: true
        default: "2748"
      armbian_fstype:
        description: "Set armbian rootfs type: ext4 / btrfs"
        required: true
        default: "ext4"
      armbian_sign:
        description: "Set armbian custom name."
        required: false
        default: ""
      upload_firmware:
        description: "whether to  upload firmware."
        required: false
        default: "false"
  #schedule:
    #- cron: "0 17 * * 0"

env:
  TZ: Asia/Shanghai
  SERVERCHAN_SCKEY: true

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: telegrame_bot
        run: |
          cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c > CPU
          cat /proc/cpuinfo | grep "cpu cores" | uniq >> CPU
          sed -i 's|[[:space:]]||g; s|^.||' CPU && sed -i 's|CPU||g; s|pucores:||' CPU
          CPUNAME="$(awk 'NR==1' CPU)" && CPUCORES="$(awk 'NR==2' CPU)"
          rm -rf CPU
          ls -a
          if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
            curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 主人：
            您正在使用kissyouhunter仓库的 {CPU型号为 [ ${CPUNAME} ] 核心数 为 [ ${CPUCORES} ] 线程数为 [ $(nproc) ]的机器} 编译 Armbian ${{ github.event.inputs.set_board }} ${{ github.event.inputs.set_release }} ${{ github.event.inputs.armbian_kernel }} for N1 编译您自己的固件,请耐心等待...... 😋" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          fi 

      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "COMPILE_STARTINGTIME=$(date +"%m.%d.%H%M")" >> $GITHUB_ENV

          ARR_BRANCH=("edge" "current" "legacy")
          set_branch="${{ github.event.inputs.set_branch }}"
          if  [[ -z "${set_branch}" || -z "$(echo "${ARR_BRANCH[@]}" | grep -w "${set_branch}")" ]]; then
              set_branch="current"
          fi
          echo "ARMBIAN_BRANCH=${set_branch}" >> $GITHUB_ENV

          ARR_RELEASE=("jammy" "focal" "bullseye")
          set_release="${{ github.event.inputs.set_release }}"
          if  [[ -z "${set_release}" || -z "$(echo "${ARR_RELEASE[@]}" | grep -w "${set_release}")" ]]; then
              set_release="focal"
          fi
          echo "ARMBIAN_RELEASE=${set_release}" >> $GITHUB_ENV

          ARR_BOARD=("lepotato" "odroidn2")
          set_board="${{ github.event.inputs.set_board }}"
          if  [[ -z "${set_board}" || -z "$(echo "${ARR_BOARD[@]}" | grep -w "${set_board}")" ]]; then
              set_board="lepotato"
          fi
          echo "ARMBIAN_BOARD=${set_board}" >> $GITHUB_ENV

          # Desktop Environment Options: https://github.com/armbian/build/tree/master/config/desktop/bullseye/environments
          ARR_DESKTOP=("no" "budgie" "cinnamon" "gnome" "mate" "xmonad" "xfce")
          set_desktop="${{ github.event.inputs.set_desktop }}"
          if  [[ "${set_desktop}" != "no" && -n "$(echo "${ARR_DESKTOP[@]}" | grep -w "${set_desktop}")" ]]; then
              # Desktop configuration: https://github.com/armbian/build/tree/master/config/desktop
              str_desktop="BUILD_DESKTOP=yes DESKTOP_ENVIRONMENT=${set_desktop} DESKTOP_ENVIRONMENT_CONFIG_NAME=config_basic"
              edition_name="${set_desktop}_desktop"
          else
              str_desktop="BUILD_DESKTOP=no"
              edition_name="server"
          fi
          echo "ARMBIAN_DESKTOP_STR=${str_desktop}" >> $GITHUB_ENV
          echo "ARMBIAN_DESKTOP_OPT=${edition_name}" >> $GITHUB_ENV

          set_armbian_sign="${{ github.event.inputs.armbian_sign }}"
          [[ -z "${set_armbian_sign}" ]] && set_armbian_sign="_${edition_name}"
          echo "ARMBIAN_CUSTOM_NAME=${set_armbian_sign}" >> $GITHUB_ENV

          set_kernel="${{ github.event.inputs.armbian_kernel }}"
          echo "ARMBIAN_KERNEL=${set_kernel}" >> $GITHUB_ENV

          upload_firmware="${{ github.event.inputs.upload_firmware }}"
          echo "UPLOAD_FIRMWARE=${upload_firmware}" >> $GITHUB_ENV

      - name: Download source code
        id: down
        run: |
          git clone --depth 1 https://github.com/armbian/build.git

      - name: Compile Armbian [ Board is ${{ env.ARMBIAN_BOARD }} / Edition is ${{ env.ARMBIAN_DESKTOP_OPT }} ]
        id: compile
        run: |
          # Compile method and parameter description: https://docs.armbian.com/Developer-Guide_Build-Options
          cd build/
          sudo chmod +x compile.sh
          sudo ./compile.sh BRANCH=${{ env.ARMBIAN_BRANCH }} RELEASE=${{ env.ARMBIAN_RELEASE }} BOARD=${{ env.ARMBIAN_BOARD }} ${{ env.ARMBIAN_DESKTOP_STR }} \
                            HOST=armbian EXPERT=yes BUILD_MINIMAL=no KERNEL_ONLY=no KERNEL_CONFIGURE=no CLEAN_LEVEL=make,debs COMPRESS_OUTPUTIMAGE=sha
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Rebuild Armbian for Amlogic s9xxx
        id: rebuild
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          sudo chmod +x build-armbian/common-files/rootfs/usr/sbin/*
          sudo chmod +x rebuild
          sudo ./rebuild -d -b s905d -k ${{ env.ARMBIAN_KERNEL }}
          cd build/output/images/ && sudo gzip *.img && sync
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          sudo mkdir -p armbian && sudo mkdir -p armbian_n1
          sudo chmod -R 777 armbian armbian_n1 *.img.gz
          sudo mv -v Armbian_*-trunk_*.img.gz armbian/
          sudo mv -v Armbian_*_Aml_s905d_*.img.gz armbian_n1/
          echo "ARMBIAN_NAME=$(ls armbian)" >> $GITHUB_ENV
          echo "ARMBIAN_N1_NAME=$(ls armbian_n1)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%m.%d.%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Armbian image
        uses: actions/upload-artifact@master
        if: steps.rebuild.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: ${{ env.ARMBIAN_NAME }}
          path: ${{ env.FIRMWARE }}/armbian

      - name: Upload firmware to release
        uses: ncipollo/release-action@v1
        if: steps.rebuild.outputs.status == 'success' && !cancelled()
        with:
          token: ${{ secrets.REPO_TOKEN }}
          name:  Armbian
          tag: Armbian
          commit: main
          allowUpdates: true
          artifacts: ${{ env.FIRMWARE }}/armbian

      - name: Upload N1 Armbian image
        uses: actions/upload-artifact@master
        if: steps.rebuild.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: ${{ env.ARMBIAN_N1_NAME }}
          path: ${{ env.FIRMWARE }}/armbian_n1

      - name: Upload firmware to release
        uses: ncipollo/release-action@v1
        if: steps.rebuild.outputs.status == 'success' && !cancelled()
        with:
          token: ${{ secrets.REPO_TOKEN }}
          name:  Armbian_N1
          tag: Armbian
          commit: main
          allowUpdates: true
          repo: Openwrt_X86-Openwrt_N1-Armbian_N1
          body: |
            ## Armbian_N1:

            * bullseye debian 11

            * jammy ubuntu 22.04

            * ID: root Password: 1234

            * 第一次登陆强制修改密码

            * U盘使用请扩展roofts分区（工具https://github.com/kissyouhunter/Openwrt_X86-Openwrt_N1-Armbian_N1/blob/main/DiskGenius/DiskGenius.5.1.1.x86.Pro.7z ）

            * 常用命令armbian-config（配置ip、cpu等配置）; armbian-install（安装到emmc）; armbian-docker （一键安装docker）；armbian-update（更新内核）；armbian-container（一键安装常用docker容器）。

            * 下载跳转[国内](https://cloud.kisslove.eu.org/)
          artifacts: ${{ env.FIRMWARE }}/armbian_n1

      - name: telegram_bot
        run: |
          if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
            curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的✨主人✨：
            您使用kissyouhunter仓库的 Armbian ${{ env.ARMBIAN_BOARD }} ${{ env.ARMBIAN_RELEASE }} ${{ env.ARMBIAN_KERNEL }} for N1 固件顺利编译完成了！💐" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          fi
