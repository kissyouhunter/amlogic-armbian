#!/bin/bash
#=========================================================================
# Function: Install armbian to EMMC
# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#
# The kernel above version 5.10 needs to install main line U-BOOT
# Write mainline u-boot command: armbian-install yes
# The mainline u-boot is not installed by default: armbian-install
#=========================================================================

SKIP=700
BOOT=256

# Receive one-key command related parameters
if [[ "${1}" == "yes" ]]; then
    auto_mainline_uboot="yes"
else
    auto_mainline_uboot="no"
fi

echo "Start install armbian to emmc..."
echo "安装armbian 到 emmc..."

root_devname=$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print substr($3, 1, length($3)-2)}')
if lsblk -l | grep -E "^${root_devname}boot0" >/dev/null; then
    echo "you are running in emmc mode, please boot system with usb or tf card!"
	echo "当前系统已经运行在emmc。请启动U盘或者TF卡上的系统!"
    exit 1
fi

install_emmc="$(lsblk -l -o NAME | grep -oE '(mmcblk[0-9]?boot0)' | sed "s/boot0//g")"
if [[ "${install_emmc}" == "" ]]; then
    echo "No emmc can be found to install the openwrt system!"
	echo "无法寻找到emmc!"
    exit 1
fi

DEV_EMMC="/dev/${install_emmc}"
echo "DEV_EMMC: ${DEV_EMMC}"

#Check if writing to EMMC is supported
MODULES_NOW=$(ls /usr/lib/modules/ 2>/dev/null)
VERSION_NOW=$(echo ${MODULES_NOW} | grep -oE '^[1-9].[0-9]{1,3}' 2>/dev/null)
echo "This Kernel [ ${VERSION_NOW} ]"

k510_ver=$(echo "${VERSION_NOW}" | cut -d '.' -f1)
k510_maj=$(echo "${VERSION_NOW}" | cut -d '.' -f2)
if [ "${k510_ver}" -eq "5" ]; then
    if [ "${k510_maj}" -ge "10" ]; then
        K510="1"
    else
        K510="0"
    fi
elif [ "${k510_ver}" -gt "5" ]; then
    K510="1"
else
    K510="0"
fi
echo "K510: [ ${K510} ]"

# Set model list, begin ------------
AMLOGIC_MODEL_LIST="
# 1.id  2.model  3.soc  4.FDTFILE  5.UBOOT_OVERLOAD  6.MAINLINE_UBOOT  7.ANDROID_UBOOT  8.description

# Amlogic GXL Family
11:Phicomm N1:s905d:meson-gxl-s905d-phicomm-n1.dtb:u-boot-n1.bin:NA:/lib/u-boot/u-boot-2015-phicomm-n1.bin:4C@1512Mhz,2GB Mem,1Gb Net,Wifi
12:Phicomm N1 (DMA thresh):s905d:meson-gxl-s905d-phicomm-n1-thresh.dtb:u-boot-n1.bin:NA:/lib/u-boot/u-boot-2015-phicomm-n1.bin:Same as above, when ethmac flow control is off
"

search_aml_model() {
    local search_soc_id="${1}"
    local ret_count=$(echo "${AMLOGIC_MODEL_LIST}" | grep -E "^${search_soc_id}:" | wc -l)
    if [ "${ret_count}" -eq "1" ]; then
        echo "${AMLOGIC_MODEL_LIST}" | grep -E "^${search_soc_id}:" | sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g'
    fi
}

# Display the model list
printf "%-s\n" "----------------------------------------------------------------------------------"
printf "%-4s %-8s %-30s %-50s\n" ID SOC MODEL DTB
printf "%-s\n" "----------------------------------------------------------------------------------"
printf "%-4s %-8s %-30s %-50s\n" $(echo "${AMLOGIC_MODEL_LIST}" | grep -E "^[0-9]{1,9}:" | sed -e 's/[ ][ ]*/-/g' | awk -F ':' '{print $1,$3,$2,$4}')
printf "%-s\n" "----------------------------------------------------------------------------------"

read -p "Please Input ID: " boxtype
if [ "${boxtype}" -eq "0" ]; then
    read -p "Please Input DTB Name: " FDTFILE
    FDTFILE=${FDTFILE}
    AMLOGIC_SOC=""
    UBOOT_OVERLOAD=""
    MAINLINE_UBOOT=""
    ANDROID_UBOOT=""
else
    ret=$(search_aml_model "${boxtype}")
    if [ "${ret}" == "" ]; then
        echo "Input error, exit!"
		echo "错误，退出!"
        exit 1
    fi

    AMLOGIC_SOC=$(echo "${ret}" | awk -F ':' '{print $3}')
    FDTFILE=$(echo "${ret}" | awk -F ':' '{print $4}')
    UBOOT_OVERLOAD=$(echo "${ret}" | awk -F ':' '{print $5}')
    MAINLINE_UBOOT=$(echo "${ret}" | awk -F ':' '{print $6}')
    ANDROID_UBOOT=$(echo "${ret}" | awk -F ':' '{print $7}')
fi
# Set model list, end ------------

echo -e "FDTFILE: [ ${FDTFILE} ]"
echo -e "UBOOT_OVERLOAD: [ ${UBOOT_OVERLOAD} ]"

if [ "${K510}" -eq "1" ]; then
    [[ -z "${UBOOT_OVERLOAD}" || ! -f "/boot/${UBOOT_OVERLOAD}" ]] && echo "Have no the 5.10 kernel u-boot file." && exit 1
fi

systemctl stop armbian-resize-filesystem.service
systemctl disable armbian-resize-filesystem.service

ORIGINAL_BOOTLOADER="/root/u-boot-default-aml.img"
if [ ! -f "${ORIGINAL_BOOTLOADER}" ]; then
    echo "Start backup default bootloader"
    dd if="${DEV_EMMC}" of=${ORIGINAL_BOOTLOADER} bs=1M count=4 conv=fsync
fi

exists_pts=$(parted ${DEV_EMMC} print | grep 'primary' | wc -l)
if [ "${exists_pts}" -gt "0" ]; then
    i=1
    while [ "${i}" -le "${exists_pts}" ]; do
        parted -s ${DEV_EMMC} rm $i 2>/dev/null
        let i++
    done
fi
dd if=/dev/zero of=${DEV_EMMC} bs=512 count=1 conv=fsync

echo "Start create MBR and partittion"
parted -s "${DEV_EMMC}" mklabel msdos 2>/dev/null
parted -s "${DEV_EMMC}" mkpart primary fat32 $((SKIP * 1024 * 1024))b $(((SKIP + BOOT) * 1024 * 1024 - 1))b 2>/dev/null
parted -s "${DEV_EMMC}" mkpart primary ext4 $(((SKIP + BOOT) * 1024 * 1024))b 100% 2>/dev/null

echo "Start write u-boot"
if [[ -n "${MAINLINE_UBOOT}" && -f ${MAINLINE_UBOOT} && "${auto_mainline_uboot}" == "yes" ]]; then
    echo "Write Mainline bootloader: [ ${MAINLINE_UBOOT} ]"
    dd if=${MAINLINE_UBOOT} of=${DEV_EMMC} bs=1 count=444 conv=fsync
    dd if=${MAINLINE_UBOOT} of=${DEV_EMMC} bs=512 skip=1 seek=1 conv=fsync
elif [[ -n "${ANDROID_UBOOT}" && -f "${ANDROID_UBOOT}" ]]; then
    echo "Write Android bootloader: [ ${ANDROID_UBOOT} ]"
    dd if=${ANDROID_UBOOT} of=${DEV_EMMC} bs=1 count=444 conv=fsync
    dd if=${ANDROID_UBOOT} of=${DEV_EMMC} bs=512 skip=1 seek=1 conv=fsync
fi

echo "Start copy system for eMMC."
mkdir -p /ddbr
chmod 777 /ddbr

PART_BOOT="${DEV_EMMC}p1"
PART_ROOT="${DEV_EMMC}p2"
DIR_INSTALL="/ddbr/install"

if [ -d ${DIR_INSTALL} ]; then
    rm -rf ${DIR_INSTALL}
fi
mkdir -p ${DIR_INSTALL}

if grep -q ${PART_BOOT} /proc/mounts; then
    echo "Unmounting BOOT partiton."
    umount -f ${PART_BOOT}
fi
echo "Formatting BOOT partition..."
mkfs.vfat -n "BOOT_EMMC" ${PART_BOOT}

mount -o rw ${PART_BOOT} ${DIR_INSTALL}

echo "Start copy BOOT_EMMC partition data..."
cp -rf /boot/* ${DIR_INSTALL} && sync
rm -rf ${DIR_INSTALL}/'System Volume Information' 2>/dev/null

echo "Edit init config..."
sed -i "s|ROOTFS|ROOTFS_EMMC|g" ${DIR_INSTALL}/uEnv.txt
sed -i "s|meson.*.dtb|${FDTFILE}|g" ${DIR_INSTALL}/uEnv.txt

rm ${DIR_INSTALL}/s9*
rm ${DIR_INSTALL}/aml*
mv -f ${DIR_INSTALL}/boot-emmc.ini ${DIR_INSTALL}/boot.ini
sed -i "s|u-boot.ext|u-boot.emmc|g" ${DIR_INSTALL}/boot.ini
mv -f ${DIR_INSTALL}/boot-emmc.scr ${DIR_INSTALL}/boot.scr
mv -f ${DIR_INSTALL}/boot-emmc.cmd ${DIR_INSTALL}/boot.cmd

if [ "${K510}" -eq "1" ]; then
    if [[ -f ${DIR_INSTALL}/${UBOOT_OVERLOAD} ]]; then
        echo "Copy [ ${UBOOT_OVERLOAD} ] to u-boot.emmc"
        if [ -f "${DIR_INSTALL}/u-boot.ext" ]; then
            cp -f ${DIR_INSTALL}/u-boot.ext ${DIR_INSTALL}/u-boot.emmc
        else
            cp -f ${DIR_INSTALL}/${UBOOT_OVERLOAD} ${DIR_INSTALL}/u-boot.ext
            cp -f ${DIR_INSTALL}/${UBOOT_OVERLOAD} ${DIR_INSTALL}/u-boot.emmc
        fi
        chmod +x ${DIR_INSTALL}/u-boot.ext
        chmod +x ${DIR_INSTALL}/u-boot.emmc
    else
        echo "Have no the 5.10 kernel u-boot file."
        exit 1
    fi
fi

sync
sleep 3

umount ${DIR_INSTALL}

if grep -q ${PART_ROOT} /proc/mounts; then
    echo "Unmounting ROOT partiton."
    umount -f ${PART_ROOT}
fi

echo "Formatting ROOT partition..."
mkfs.ext4 -F -L ROOTFS_EMMC ${PART_ROOT}

echo "Start copy ROOTFS_EMMC partition data..."
mount -t ext4 ${PART_ROOT} ${DIR_INSTALL}

cd /
mkdir -p ${DIR_INSTALL}/{boot/,dev/,media/,mnt/,proc/,run/,sys/,tmp/} && sync
COPY_SRC="bin etc home lib lib64 opt root sbin selinux srv usr var"
for src in ${COPY_SRC}; do
    echo "copy [ ${src} ] ..."
    tar -cf - ${src} | (
        cd ${DIR_INSTALL}
        tar -xf -
    )
    sync
done
echo "Copy complete."

echo "Update the relevant parameters of armbian-aml-release"
ophub_release_file="${DIR_INSTALL}/etc/ophub-release"
sed -i '/FDTFILE/d' ${ophub_release_file} 2>/dev/null
echo "FDTFILE='${FDTFILE}'" >>${ophub_release_file} 2>/dev/null

sed -i '/UBOOT_OVERLOAD/d' ${ophub_release_file} 2>/dev/null
echo "UBOOT_OVERLOAD='${UBOOT_OVERLOAD}'" >>${ophub_release_file} 2>/dev/null

sed -i '/MAINLINE_UBOOT/d' ${ophub_release_file} 2>/dev/null
echo "MAINLINE_UBOOT='${MAINLINE_UBOOT}'" >>${ophub_release_file} 2>/dev/null

sed -i '/ANDROID_UBOOT/d' ${ophub_release_file} 2>/dev/null
echo "ANDROID_UBOOT='${ANDROID_UBOOT}'" >>${ophub_release_file} 2>/dev/null

sed -i '/SOC/d' ${ophub_release_file} 2>/dev/null
echo "SOC='${AMLOGIC_SOC}'" >>${ophub_release_file} 2>/dev/null
echo "Update complete."
sync

rm -f ${DIR_INSTALL}/etc/fstab 2>/dev/null && sync
cat >${DIR_INSTALL}/etc/fstab <<EOF
/dev/root       /               ext4            defaults,noatime,errors=remount-ro     	0 1
LABEL=BOOT_EMMC /boot           vfat            defaults                                0 2
tmpfs           /tmp            tmpfs           defaults,nosuid                         0 0
EOF

rm -f ${DIR_INSTALL}/usr/sbin/armbian-tf 2>/dev/null
sync

cd /
umount ${DIR_INSTALL}
sleep 3

echo "*************************************************************************************************"
echo "Successful installed, please unplug the USB, re-insert the power supply to start the armbian."
echo "安装成功，拔掉电源和U盘."
echo "*************************************************************************************************"
exit 0
