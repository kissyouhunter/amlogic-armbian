#!/bin/bash
#=========================================================================
# Function: Install armbian to EMMC
# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#
# The kernel above version 5.10 needs to install  main line U-BOOT
# Do not write main line U-BOOT command: armbian-install no
# Write the main line U-BOOT by default: armbian-install
#=========================================================================

SKIP=700
BOOT=256

# Receive one-key command related parameters
if [[ "${1}" == "no" ]]; then
    AUTO_MAINLINE_UBOOT="no"
else
    AUTO_MAINLINE_UBOOT="yes"
fi

echo "Start install armbian to emmc..."

root_devname=$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print substr($3, 1, length($3)-2)}')
if lsblk -l | grep -E "^${root_devname}boot0" >/dev/null; then
    echo "you are running in emmc mode, please boot system with usb or tf card!"
    exit 1
fi

install_emmc="$(lsblk -l -o NAME | grep -oE '(mmcblk[0-9]?boot0)' | sed "s/boot0//g")"
if [[ "${install_emmc}" == "" ]]; then
    echo "No emmc can be found to install the openwrt system!"
    exit 1
fi

DEV_EMMC="/dev/${install_emmc}"
echo "DEV_EMMC: ${DEV_EMMC}"

# Set model list, begin ------------
AMLOGIC_MODEL_LIST="
# 1.id  2.model  3.soc  4.FDTFILE  5.UBOOT_OVERLOAD  6.MAINLINE_UBOOT  7.ANDROID_UBOOT  8.description

# Amlogic GXL Family
11:Phicomm N1:s905d:meson-gxl-s905d-phicomm-n1.dtb:u-boot-n1.bin:NA:/lib/u-boot/u-boot-2015-phicomm-n1.bin:4C@1512Mhz,2GB Mem,1Gb Net,Wifi
12:Phicomm N1 (DMA thresh):s905d:meson-gxl-s905d-phicomm-n1-thresh.dtb:u-boot-n1.bin:NA:/lib/u-boot/u-boot-2015-phicomm-n1.bin:Same as above, when ethmac flow control is off
13:hg680p & b860h:s905x:meson-gxl-s905x-p212.dtb:u-boot-p212.bin:NA:NA:4C@1512Mhz,1Gb Net
14:X96-Mini & TX3-Mini:s905w:meson-gxl-s905w-tx3-mini.dtb:u-boot-s905x-s912.bin:NA:NA:4C@1512Mhz,100M Net

# Amlogic GXM Family
21:Octopus Planet:s912:meson-gxm-octopus-planet.dtb:u-boot-zyxq.bin:NA:NA:4C@1512Mhz+4C@1000Mhz,2GB Mem,1Gb Net
22:T95Z Plus:s912:meson-gxm-t95z-plus.dtb:u-boot-s905x-s912.bin:NA:NA:3G+32G,Octa-Core,2.4/5.8G Dual-Band Wi-Fi/10-1000M LAN 64Bit BT4.0

# Amlogic G12A Family
31:X96 Max 4GB:s905x2:meson-g12a-x96-max.dtb:u-boot-x96max.bin:/lib/u-boot/x96max-u-boot.bin.sd.bin:NA:4C@1908Mhz,4GB Mem,1Gb Net
32:X96 Max 2GB:s905x2:meson-g12a-x96-max-rmii.dtb:u-boot-x96max.bin:/lib/u-boot/x96max-u-boot.bin.sd.bin:NA:4C@1908Mhz,2GB Mem,100M Net

# Amlogic G12B Family
41:Beelink GT-King:s922x:meson-g12b-gtking.dtb:u-boot-gtking.bin:/lib/u-boot/gtking-u-boot.bin.sd.bin:NA:2C@1800Mhz(A53)+4C@1908Mhz(A73),4GB Mem,1Gb Net,Wifi
42:Beelink GT-King Pro:s922x:meson-g12b-gtking-pro.dtb:u-boot-gtkingpro.bin:/lib/u-boot/gtkingpro-u-boot.bin.sd.bin:NA:2C@1800Mhz(A53)+4C@1908Mhz(A73),4GB Mem,1Gb Net,Wifi
43:Beelink GT-King Pro H:s922x:meson-g12b-gtking-pro-h.dtb:u-boot-gtkingpro.bin:/lib/u-boot/gtkingpro-u-boot.bin.sd.bin:NA:S922X-H,2C@1800Mhz(A53)+4C@2208Mhz(A73),4GB Mem,1Gb Net,Wifi
44:Beelink GT-King Pro Rev_A:s922x:meson-g12b-gtking-pro-rev_a.dtb:u-boot-odroid-n2.bin:NA:NA:2C@1800Mhz(A53)+4C@1908Mhz(A73),4GB Mem,1Gb Net,Wifi
45:Hardkernel ODroid N2:s922x:meson-g12b-odroid-n2.dtb:u-boot-odroid-n2.bin:/lib/u-boot/odroid-n2-u-boot.bin.sd.bin:NA:2C@1800Mhz(A53)+4C@1908Mhz(A73),4GB Mem,1Gb Net
46:UGOOS AM6 Plus:s922x:meson-g12b-ugoos-am6.dtb:u-boot-gtkingpro.bin:/lib/u-boot/gtkingpro-u-boot.bin.sd.bin:NA:2C@1800Mhz(A53)+4C@1908Mhz(A73),4GB Mem,1Gb Net,Wifi

# Amlogic SM1 Family
51:X96 Max+:s905x3:meson-sm1-x96-max-plus.dtb:u-boot-x96maxplus.bin:/lib/u-boot/x96maxplus-u-boot.bin.sd.bin:/lib/u-boot/hk1box-bootloader.img:4C@2100Mhz,4GB Mem,1Gb Net
52:X96 Max+ (OverClock):s905x3:meson-sm1-x96-max-plus-oc.dtb:u-boot-x96maxplus.bin:/lib/u-boot/x96maxplus-u-boot.bin.sd.bin:/lib/u-boot/hk1box-bootloader.img:4C@2208Mhz,4GB Mem,1Gb Net
53:HK1 Box:s905x3:meson-sm1-hk1box-vontar-x3.dtb:u-boot-x96maxplus.bin:/lib/u-boot/hk1box-u-boot.bin.sd.bin:NA:4C@2100Mhz,4GB Mem,1Gb Net,Wifi
54:HK1 Box (OveClock):s905x3:meson-sm1-hk1box-vontar-x3-oc.dtb:u-boot-x96maxplus.bin:/lib/u-boot/hk1box-u-boot.bin.sd.bin:NA:4C@2208Mhz,4GB Mem,1Gb Net,Wifi
55:H96 Max X3:s905x3:meson-sm1-h96-max-x3.dtb:u-boot-x96maxplus.bin:/lib/u-boot/h96maxx3-u-boot.bin.sd.bin:NA:4C@2100Mhz,4GB Mem,1Gb Net,Wifi
56:H96 Max X3:s905x3:meson-sm1-h96-max-x3-oc.dtb:u-boot-x96maxplus.bin:/lib/u-boot/h96maxx3-u-boot.bin.sd.bin:NA:4C@2208Mhz,4GB Mem,1Gb Net,Wifi
57:Ugoos X3:s905x3:meson-sm1-ugoos-x3.dtb:u-boot-ugoos-x3.bin:NA:NA:4C@2100Mhz,2(Cube)/4(Pro,Plus)GB Mem,1Gb Net,Wifi
58:Ugoos X3(OverClock):s905x3:meson-sm1-ugoos-x3.dtb:u-boot-ugoos-x3.bin:NA:NA:4C@2208Mhz,2(Cube)/4(Pro,Plus)GB Mem,1Gb Net,Wifi

# Other
0:Unknown:Other:Import-custom-dtb-file:NA:NA:NA:Enter the dtb file name of your box
"

search_aml_model() {
    local search_soc_id="${1}"
    local ret_count=$(echo "${AMLOGIC_MODEL_LIST}" | grep -E "^${search_soc_id}:" | wc -l)
    if [ "${ret_count}" -eq "1" ]; then
        echo "${AMLOGIC_MODEL_LIST}" | grep -E "^${search_soc_id}:" | sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g'
    fi
}

# Display the model list
printf "%-s\n" "----------------------------------------------------------------------------------"
printf "%-4s %-8s %-30s %-50s\n" ID SOC MODEL DTB
printf "%-s\n" "----------------------------------------------------------------------------------"
printf "%-4s %-8s %-30s %-50s\n" $(echo "${AMLOGIC_MODEL_LIST}" | grep -E "^[0-9]{1,9}:" | sed -e 's/[ ][ ]*/-/g' | awk -F ':' '{print $1,$3,$2,$4}')
printf "%-s\n" "----------------------------------------------------------------------------------"

read -p "Please Input ID: " boxtype
if [ "${boxtype}" -eq "0" ]; then
    read -p "Please Input DTB Name: " FDTFILE
    FDTFILE=${FDTFILE}
    AMLOGIC_SOC=""
    UBOOT_OVERLOAD=""
    MAINLINE_UBOOT=""
    ANDROID_UBOOT=""
else
    ret=$(search_aml_model "${boxtype}")
    if [ "${ret}" == "" ]; then
        echo "Input error, exit!"
        exit 1
    fi

    AMLOGIC_SOC=$(echo "${ret}" | awk -F ':' '{print $3}')
    FDTFILE=$(echo "${ret}" | awk -F ':' '{print $4}')
    UBOOT_OVERLOAD=$(echo "${ret}" | awk -F ':' '{print $5}')
    MAINLINE_UBOOT=$(echo "${ret}" | awk -F ':' '{print $6}')
    ANDROID_UBOOT=$(echo "${ret}" | awk -F ':' '{print $7}')
fi
# Set model list, end ------------

echo -e "FDTFILE: [ ${FDTFILE} ]"

systemctl stop armbian-resize-filesystem.service
systemctl disable armbian-resize-filesystem.service

echo "Start backup u-boot default"
dd if="${DEV_EMMC}" of=/root/u-boot-default-aml.img bs=1M count=4 conv=fsync
exists_pts=$(parted ${DEV_EMMC} print | grep 'primary' | wc -l)
if [ "${exists_pts}" -gt "0" ]; then
    i=1
    while [ "${i}" -le "${exists_pts}" ]; do
        parted -s ${DEV_EMMC} rm $i 2>/dev/null
        let i++
    done
fi
dd if=/dev/zero of=${DEV_EMMC} bs=512 count=1 conv=fsync

echo "Start create MBR and partittion"
parted -s "${DEV_EMMC}" mklabel msdos 2>/dev/null
parted -s "${DEV_EMMC}" mkpart primary fat32 $((SKIP * 1024 * 1024))b $(((SKIP + BOOT) * 1024 * 1024 - 1))b 2>/dev/null
parted -s "${DEV_EMMC}" mkpart primary ext4 $(((SKIP + BOOT) * 1024 * 1024))b 100% 2>/dev/null

echo "Start write u-boot"
if [[ -n "${MAINLINE_UBOOT}" && -f ${MAINLINE_UBOOT} && "${AUTO_MAINLINE_UBOOT}" == "yes" ]]; then
    echo -e "Write Mainline bootloader: [ ${MAINLINE_UBOOT} ]"
    dd if=${MAINLINE_UBOOT} of=${DEV_EMMC} bs=1 count=444 conv=fsync
    dd if=${MAINLINE_UBOOT} of=${DEV_EMMC} bs=512 skip=1 seek=1 conv=fsync
elif [[ -n "${ANDROID_UBOOT}" && -f "${ANDROID_UBOOT}" ]]; then
    echo -e "Write Android bootloader: [ ${ANDROID_UBOOT} ]"
    dd if=${ANDROID_UBOOT} of=${DEV_EMMC} bs=1 count=444 conv=fsync
    dd if=${ANDROID_UBOOT} of=${DEV_EMMC} bs=512 skip=1 seek=1 conv=fsync
else
    echo "Restore the original u-boot"
    dd if=/root/u-boot-default-aml.img of="${DEV_EMMC}" conv=fsync bs=1 count=442
    dd if=/root/u-boot-default-aml.img of="${DEV_EMMC}" conv=fsync bs=512 skip=1 seek=1
fi

echo "Start copy system for eMMC."
mkdir -p /ddbr
chmod 777 /ddbr

PART_BOOT="${DEV_EMMC}p1"
PART_ROOT="${DEV_EMMC}p2"
DIR_INSTALL="/ddbr/install"

if [ -d ${DIR_INSTALL} ]; then
    rm -rf ${DIR_INSTALL}
fi
mkdir -p ${DIR_INSTALL}

if grep -q ${PART_BOOT} /proc/mounts; then
    echo "Unmounting BOOT partiton."
    umount -f ${PART_BOOT}
fi
echo "Formatting BOOT partition..."
mkfs.vfat -n "BOOT_EMMC" ${PART_BOOT}

mount -o rw ${PART_BOOT} ${DIR_INSTALL}

echo "Start copy BOOT_EMMC partition data..."
cp -rf /boot/* ${DIR_INSTALL} && sync
rm -rf ${DIR_INSTALL}/'System Volume Information' 2>/dev/null

echo "Edit init config..."
sed -i "s|ROOTFS|ROOTFS_EMMC|g" ${DIR_INSTALL}/uEnv.txt
sed -i "s|meson.*.dtb|${FDTFILE}|g" ${DIR_INSTALL}/uEnv.txt

rm ${DIR_INSTALL}/s9*
rm ${DIR_INSTALL}/aml*
mv -f ${DIR_INSTALL}/boot-emmc.ini ${DIR_INSTALL}/boot.ini
sed -i "s|u-boot.ext|u-boot.emmc|g" ${DIR_INSTALL}/boot.ini
mv -f ${DIR_INSTALL}/boot-emmc.scr ${DIR_INSTALL}/boot.scr
mv -f ${DIR_INSTALL}/boot-emmc.cmd ${DIR_INSTALL}/boot.cmd

if [ -f ${DIR_INSTALL}/${UBOOT_OVERLOAD} ]; then
    echo "Copy [ ${UBOOT_OVERLOAD} ] to u-boot.emmc"
    cp -f ${DIR_INSTALL}/${UBOOT_OVERLOAD} ${DIR_INSTALL}/u-boot.emmc
else
    echo "Mv [ u-boot.sd ] to u-boot.emmc"
    mv -f ${DIR_INSTALL}/u-boot.sd ${DIR_INSTALL}/u-boot.emmc
fi

sync

umount ${DIR_INSTALL}

if grep -q ${PART_ROOT} /proc/mounts; then
    echo "Unmounting ROOT partiton."
    umount -f ${PART_ROOT}
fi

echo "Formatting ROOT partition..."
mkfs.ext4 -F -L ROOTFS_EMMC ${PART_ROOT}

echo "Start copy ROOTFS_EMMC partition data..."
mount -t ext4 ${PART_ROOT} ${DIR_INSTALL}

cd /
mkdir -p ${DIR_INSTALL}/{boot/,dev/,media/,mnt/,proc/,run/,sys/,tmp/} && sync
COPY_SRC="bin etc home lib lib64 opt root sbin selinux srv usr var"
for src in ${COPY_SRC}; do
    echo "copy [ ${src} ] ..."
    tar -cf - ${src} | (
        cd ${DIR_INSTALL}
        tar -xf -
    )
    sync
done
echo "Copy complete."

echo "Update the relevant parameters of armbian-aml-release"
ENV_ARMBIAN_FILE="${DIR_INSTALL}/etc/armbian-aml-release"
sed -i '/FDTFILE/d' ${ENV_ARMBIAN_FILE} 2>/dev/null
echo "FDTFILE='${FDTFILE}'" >>${ENV_ARMBIAN_FILE} 2>/dev/null

sed -i '/UBOOT_OVERLOAD/d' ${ENV_ARMBIAN_FILE} 2>/dev/null
echo "UBOOT_OVERLOAD='${UBOOT_OVERLOAD}'" >>${ENV_ARMBIAN_FILE} 2>/dev/null

sed -i '/MAINLINE_UBOOT/d' ${ENV_ARMBIAN_FILE} 2>/dev/null
echo "MAINLINE_UBOOT='${MAINLINE_UBOOT}'" >>${ENV_ARMBIAN_FILE} 2>/dev/null

sed -i '/ANDROID_UBOOT/d' ${ENV_ARMBIAN_FILE} 2>/dev/null
echo "ANDROID_UBOOT='${ANDROID_UBOOT}'" >>${ENV_ARMBIAN_FILE} 2>/dev/null

sed -i '/SOC/d' ${ENV_ARMBIAN_FILE} 2>/dev/null
echo "SOC='${AMLOGIC_SOC}'" >>${ENV_ARMBIAN_FILE} 2>/dev/null
echo "Update complete."
sync

rm -f ${DIR_INSTALL}/etc/fstab 2>/dev/null && sync
cat >${DIR_INSTALL}/etc/fstab <<EOF
/dev/root       /               ext4            defaults,noatime,errors=remount-ro     	0 1
LABEL=BOOT_EMMC /boot           vfat            defaults                                0 0
tmpfs           /tmp            tmpfs           defaults,nosuid                         0 0
EOF

rm -f ${DIR_INSTALL}/usr/sbin/armbian-tf 2>/dev/null
sync

cd /
umount ${DIR_INSTALL}
sleep 3

echo "*************************************************************************************************"
echo "Successful installed, please unplug the USB, re-insert the power supply to start the armbian."
echo "*************************************************************************************************"
exit 0
